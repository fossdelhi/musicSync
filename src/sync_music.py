#!/usr/bin/env python3
import click
import subprocess
import os
import json


def gen_index(dirs: tuple) -> bool:
    """
    This function calls bash script to generates file "Index" having address of
    all the songs from the given directory needed to be sync.

    arg dir: tuple of directories, from which songs need to by sync.

    Return False: if directory given is empty string.
    Return False: if shell script returns with exit status 1, that is when shell
                  script couldn't find the required directory.
    Return True: if Index is successfully generated by shell scripts.
    """

    if dirs == ('',):
        print("\nNull directory!")
        return False

    # To call shell script with given directories from subprocess.call(),
    # making this command "./generate_index.sh dir1 dir2" as a list.
    script_path = os.path.expanduser('~/.sync-music/scripts/generate_index.sh')
    call_script = list(dirs)
    call_script.insert(0,script_path)
    # If call_script returns with exit status 1 for "directory not found".
    if subprocess.call(call_script):
        return False
    else:
        return True


def update_config(config: tuple,
                  user_file='~/.sync-music/config/keys.json') -> bool:
    """
    This function updates user given congfigurations in keys.json. For
    example API key.

    arg1 config: tuple consist of "field of configuration" and its "value".
    arg2 user_file: path to configuration file. Default path is setup by
                      executing "setup.sh"

    Return Flase: if "field of configuration" is not valid.
    Return True: if keys.json is found and configurations are updated.
    """

    if config[0] != 'dropbox.key':
        print("\nCouldn't recognize \"%s\" option. See: sync-music --help" %
              config[0])
        return False

    else:
        user_file = os.path.expanduser(user_file)
        try:
            if not os.path.isfile(user_file):
                raise FileNotFoundError
            with open(user_file, mode='w+') as f:
                json.dump(dict({config}),f)

        except FileNotFoundError:
            print("\nkeys.json is unavailable.")
            return False
        return True


def get_config(user_file='~/.sync-music/config/keys.json'):
    """
    This function brings the configration from keys.json. And if
    configurations are not present, then it also give a user friendly message
    to first update their configurations and then try again.

    arg1 user_file: path to configuration file. Default path is setup by
                      executing "setup.sh".

    Return False: If either keys.json is empty or not found.
    Return API key: If configurations are successfully read from the file.
    """

    user_file = os.path.expanduser(user_file)
    try:
        with open(user_file, mode='r') as f:
            keys = json.loads(f.read())
            if os.stat(user_file).st_size != 0 and keys['dropbox.key'] != '':
                return keys['dropbox.key']
            else:
                print("\nPlease config sync-music with dropbox API_token.\n"
                      "See: sync-music --help")
                return False
    except FileNotFoundError:
        print("\nkeys.json is unavailable.")
        return False


@click.command()
@click.argument('dirs', nargs=-1, required=False)
@click.option('--config',  nargs=2, type=str,
              help="To set configurations e.i:\n"
              "--config dropbox.key <API_key>")
def main(dirs, config):
    if config and update_config(config):
        print("Configured successfully.")
    elif dirs and gen_index(dirs):
        print("Index generated successfully.")
    else:
        exit(1)


if __name__ == '__main__':
    main()
